nd(types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=next_id))
    else:
        buttons.append(types.InlineKeyboardButton(" ", callback_data="empty"))

    markup.row(*buttons)

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Ä–∏–∏
    for dubbing_name in anime_db[anime][current_episode]:
        dubbing_data = f"dubbing_{anime}|{current_episode}|{dubbing_name}_{user_id}"
        short_id = create_short_id(dubbing_data)
        markup.add(types.InlineKeyboardButton(dubbing_name, callback_data=short_id))

    return markup

def generate_anime_keyboard(anime, user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)

    user_str_id = str(user_id)
    user_favs = set(user_data.get(user_str_id, {}).get('favorites', []))
    user_notifs = set(user_data.get(user_str_id, {}).get('notifications', []))

    if anime in user_favs:
        fav_text = "üíî –£–±—Ä–∞—Ç—å –∏–∑ –ª—é–±–∏–º—ã—Ö"
    else:
        fav_text = "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"

    fav_id = create_short_id(f"favtoggle_{anime}_{user_id}")
    markup.add(types.InlineKeyboardButton(fav_text, callback_data=fav_id))

    if anime in user_favs:
        if anime in user_notifs:
            notif_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        else:
            notif_text = "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        notif_id = create_short_id(f"notiftoggle_{anime}_{user_id}")
        markup.add(types.InlineKeyboardButton(notif_text, callback_data=notif_id))

    episodes = sorted(anime_db[anime].keys(), key=lambda x: int(x) if x.isdigit() else x)
    if episodes:
        first_ep_id = create_short_id(f"episode_{anime}|{episodes[0]}_{user_id}")
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–∏—é", callback_data=first_ep_id))

    return markup

def send_notification(anime):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ anime –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    sent_count = 0
    for user_str_id, data_dict in user_data.items():
        if anime in data_dict.get('notifications', []):
            try:
                bot.send_message(int(user_str_id), f"üîî –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–Ω–∏–º–µ: <b>{anime}</b>!", parse_mode="HTML")
                sent_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_str_id}: {e}")
    return sent_count

def periodic_check():
    """–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∏–º–µ –∏–∑ –±–∞–∑—ã
        if anime_db:
            first_anime = next(iter(anime_db))
            send_notification(first_anime)
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    user_str_id = str(user_id)
    if user_str_id not in user_data:
        user_data[user_str_id] = {"favorites": [], "notifications": []}
        save_user_data()

    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ!\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üîç –ù–∞–π–¥—É –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "üé¨ –ü–æ–∫–∞–∂—É –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å Shikimori\n"
        "üì∫ –î–∞–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–∑–≤—É—á–∫–∞–º–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é —Å–∞–º üòä"
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global callback_storage

    user_id = call.from_user.id
    user_str_id = str(user_id)

    data = call.data
    if data == "empty":
        bot.answer_callback_query(call.id)
        return

    if data not in callback_storage:
        bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    full_data = callback_storage[data]

    # –§–æ—Ä–º–∞—Ç: action_anime[_episode][_dubbing]_userId
    parts = full_data.split('_', 1)
    action = parts[0]

    if action == "anime":
        # full_data: anime_AnimeName_userId
        m = re.match(r'anime_(.+)_(\d+)$', full_data)
        if not m:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return
        anime_name, uid = m.group(1), m.group(2)
        if int(uid) != user_id:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        if not send_shikimori_info(call.message.chat.id, anime_name):
            bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        markup = generate_anime_keyboard(anime_name, user_id)
        bot.send_message(call.message.chat.id, f"üé¨ <b>{anime_name}</b>", reply_markup=markup, parse_mode="HTML")
        bot.answer_callback_query(call.id)

    elif action == "episode":
        # full_data: episode_AnimeName|Episode_userId
        m = re.match(r'episode_(.+)\|(.+)_(\d+)$', full_data)
        if not m:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return
        anime_name, episode, uid = m.group(1), m.group(2), m.group(3)
        if int(uid) != user_id:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return

        if anime_name not in anime_db or episode not in anime_db[anime_name]:
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        markup = generate_episode_keyboard(anime_name, episode, user_id)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id)

    elif action == "dubbing":
        # full_data: dubbing_AnimeName|Episode|Dubbing_userId
        m = re.match(r'dubbing_(.+)\|(.+)\|(.+)_(\d+)$', full_data)
        if not m:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return
        anime_name, episode, dubbing_name, uid = m.group(1), m.group(2), m.group(3), m.group(4)
        if int(uid) != user_id:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return

        if (anime_name not in anime_db or episode not in anime_db[anime_name] or
                dubbing_name not in anime_db[anime_name][episode]):
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        link = anime_db[anime_name][episode][dubbing_name]
        bot.send_message(call.message.chat.id, f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ {dubbing_name} –¥–ª—è —Å–µ—Ä–∏–∏ {episode}:\n{link}")
        bot.answer_callback_query(call.id)

    elif action == "favtoggle":
        # full_data: favtoggle_AnimeName_userId
        m = re.match(r'favtoggle_(.+)_(\d+)$', full_data)
        if not m:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return
        anime_name, uid = m.group(1), m.group(2)
        if int(uid) != user_id:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return

        user_favs = user_data.setdefault(user_str_id, {}).setdefault('favorites', [])
        if anime_name in user_favs:
            user_favs.remove(anime_name)
            bot.answer_callback_query(call.id, f"{anime_name} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        else:
            user_favs.append(anime_name)
            bot.answer_callback_query(call.id, f"{anime_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        save_user_data()

        markup = generate_anime_keyboard(anime_name, user_id)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

    elif action == "notiftoggle":
        # full_data: notiftoggle_AnimeName_userId
        m = re.match(r'notiftoggle_(.+)_(\d+)$', full_data)
        if not m:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return
        anime_name, uid = m.group(1), m.group(2)
        if int(uid) != user_id:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return

        user_notifs = user_data.setdefault(user_str_id, {}).setdefault('notifications', [])
        if anime_name in user_notifs:
            user_notifs.remove(anime_name)
            bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {anime_name} –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        else:
            user_notifs.append(anime_name)
            bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {anime_name} –≤–∫–ª—é—á–µ–Ω—ã.")
        save_user_data()

        markup = generate_anime_keyboard(anime_name, user_id)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    query = message.text.strip().lower()
    matched_anime = [a for a in anime_db if query in a.lower()]

    if not matched_anime:
        success = send_shikimori_info(message.chat.id, query)
        if success:
            bot.send_message(message.chat.id,
                             f"‚ö†Ô∏è –≠—Ç–æ–≥–æ –∞–Ω–∏–º–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –±–æ—Ç–∞.\n"
                             f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –µ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @{ADMIN_ID}")
        else:
            bot.send_message(message.chat.id, "–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–µ –≤ –±–∞–∑–µ
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    for anime in matched_anime:
        btn_id = create_short_id(f"anime_{anime}_{user_id}")
        markup.add(types.InlineKeyboardButton(anime, callback_data=btn_id))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∞–Ω–∏–º–µ:", reply_markup=markup)

if __name__ == "__main__":
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # threading.Thread(target=periodic_check, daemon=True).start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)
