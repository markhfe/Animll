import os
import re
import time
import json
import hashlib
import requests
import csv
from io import StringIO
from telebot import TeleBot, types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
bot = TeleBot(os.getenv("TELEGRAM_TOKEN"))  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = os.getenv("TELEGRAM_ID")         # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)

# ----------------------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑—ã –∞–Ω–∏–º–µ –∏–∑ Google Sheets (CSV)
def load_anime_db():
    url = "https://docs.google.com/spreadsheets/d/10dD8Hhf-uVxuloE6yy0p8hdswbW7xGrNR_6otJTbKuA/export?format=csv&gid=0"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.content.decode('utf-8')
        reader = csv.DictReader(StringIO(data))

        anime_db = {}
        for row in reader:
            anime = row['Anime']
            episode = row['Episode']
            dubbing = row['Dubbing Name']
            link = row['Link']

            anime_db.setdefault(anime, {}).setdefault(episode, {})[dubbing] = link
        return anime_db
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∞–Ω–∏–º–µ: {e}")
        return {}

anime_db = load_anime_db()

# ----------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open('user_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data():
    with open('user_data.json', 'w', encoding='utf-8') as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

user_data = load_user_data()

# ----------------------------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–æ–∫
callback_storage = {}

def create_short_id(long_string):
    hash_obj = hashlib.md5(long_string.encode())
    short_id = hash_obj.hexdigest()[:16]
    callback_storage[short_id] = long_string
    return short_id

# ----------------------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å Shikimori API
def send_shikimori_info(chat_id, title):
    headers = {
        "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                       "AppleWebKit/537.36 (KHTML, like Gecko) "
                       "Chrome/114.0.0.0 Safari/537.36")
    }
    retries = 2
    timeout_sec = 15

    def request_with_retry(url):
        last_exception = None
        for attempt in range(retries):
            try:
                response = requests.get(url, headers=headers, timeout=timeout_sec)
                response.raise_for_status()
                return response
            except requests.exceptions.RequestException as e:
                last_exception = e
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                time.sleep(1)
        raise last_exception

    try:
        search_url = f"https://shikimori.one/api/animes?search={title}"
        response = request_with_retry(search_url)
        data = response.json()

        if not data:
            return False

        anime = data[0]
        anime_id = anime.get('id')
        if not anime_id:
            return False

        details_url = f"https://shikimori.one/api/animes/{anime_id}"
        details_response = request_with_retry(details_url)
        anime_details = details_response.json()

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        if not anime_details.get('russian') and anime_details.get('name'):
            alt_search_url = f"https://shikimori.one/api/animes?search={anime_details['name']}"
            alt_response = request_with_retry(alt_search_url)
            alt_data = alt_response.json()
            if alt_data:
                anime = alt_data[0]
                anime_id = anime.get('id')
                if anime_id:
                    details_url = f"https://shikimori.one/api/animes/{anime_id}"
                    details_response = request_with_retry(details_url)
                    anime_details = details_response.json()

        title_ru = anime_details.get('russian') or anime_details.get('name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        description = anime_details.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.').replace('<br>', '\n')
        year = anime_details.get('aired_on')
        year = year[:4] if year else "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        image_info = anime_details.get('image')
        image_url = f"https://shikimori.one{image_info['original']}" if image_info and image_info.get('original') else None

        caption = f"üé¨ <b>{title_ru}</b>\nüìÖ {year}\n\nüìù {description}"

        if image_url:
            bot.send_photo(chat_id, photo=image_url, caption=caption, parse_mode="HTML")
        else:
            bot.send_message(chat_id, caption, parse_mode="HTML")

        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Shikimori: {e}")
        return False

# ----------------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def generate_episode_keyboard(anime, episode, user_id):
    markup = types.InlineKeyboardMarkup(row_width=3)

    episodes = sorted(anime_db[anime].keys(), key=lambda x: int(x) if x.isdigit() else x)
    current_index = episodes.index(episode)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —ç–ø–∏–∑–æ–¥–∞–º–∏
    nav_buttons = []
    if current_index > 0:
        prev_ep = episodes[current_index - 1]
        prev_id = create_short_id(f"episode_{anime}|{prev_ep}_{user_id}")
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=prev_id))
    else:
        nav_buttons.append(types.InlineKeyboardButton(" ", callback_data="empty"))

    nav_buttons.append(types.InlineKeyboardButton(f"–°–µ—Ä–∏—è {episode}", callback_data="empty"))

    if current_index < len(episodes) - 1:
        next_ep = episodes[current_index + 1]
        next_id = create_short_id(f"episode_{anime}|{next_ep}_{user_id}")
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=next_id))
    else:
        nav_buttons.append(types.InlineKeyboardButton(" ", callback_data="empty"))

    markup.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–µ–∫
    for dubbing_name in anime_db[anime][episode]:
        dub_id = create_short_id(f"dubbing_{anime}|{episode}|{dubbing_name}_{user_id}")
        markup.add(types.InlineKeyboardButton(dubbing_name, callback_data=dub_id))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∞–Ω–∏–º–µ"
    back_id = create_short_id(f"anime_{anime}_{user_id}")
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∏–º–µ", callback_data=back_id))

    return markup

def generate_anime_keyboard(anime, user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    user_str_id = str(user_id)
    user_favs = set(user_data.get(user_str_id, {}).get('favorites', []))
    user_notifs = set(user_data.get(user_str_id, {}).get('notifications', []))

    # –ö–Ω–æ–ø–∫–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ / –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    fav_text = "üíî –£–±—Ä–∞—Ç—å –∏–∑ –ª—é–±–∏–º—ã—Ö" if anime in user_favs else "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    fav_id = create_short_id(f"favtoggle_{anime}_{user_id}")
    markup.add(types.InlineKeyboardButton(fav_text, callback_data=fav_id))

    # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    if anime in user_favs:
        notif_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if anime in user_notifs else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        notif_id = create_short_id(f"notiftoggle_{anime}_{user_id}")
        markup.add(types.InlineKeyboardButton(notif_text, callback_data=notif_id))

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–∏–∏ (–ø–µ—Ä–≤–∞—è –ø–æ –ø–æ—Ä—è–¥–∫—É)
    episodes = sorted(anime_db[anime].keys(), key=lambda x: int(x) if x.isdigit() else x)
    if episodes:
        first_ep_id = create_short_id(f"episode_{anime}|{episodes[0]}_{user_id}")
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–∏—é", callback_data=first_ep_id))

    return markup

# ----------------------------------------
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ —Ñ–æ–Ω–µ)
def send_notification(anime):
    sent_count = 0
    for user_str_id, data_dict in user_data.items():
        if anime in data_dict.get('notifications', []):
            try:
                bot.send_message(int(user_str_id), f"üîî –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–Ω–∏–º–µ: <b>{anime}</b>!", parse_mode="HTML")
                sent_count += 1
            except Exception:
                pass
    return sent_count

def periodic_check():
    while True:
        try:
            new_db = load_anime_db()
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            # –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —ç–ø–∏–∑–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ —Ä–∞–Ω–µ–µ
            # –∏ –≤—ã–∑–≤–∞—Ç—å send_notification –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–∏–º–µ

            # –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É
            global anime_db
            anime_db = new_db
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        time.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

# ----------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"favorites": [], "notifications": []}
        save_user_data()

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ –∞–Ω–∏–º–µ.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–∏–∏."
    )
    bot.send_message(message.chat.id, welcome_text)

@bot.message_handler(commands=['favorites'])
def handle_favorites(message):
    user_id = str(message.from_user.id)
    favs = user_data.get(user_id, {}).get('favorites', [])
    if not favs:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –∞–Ω–∏–º–µ.")
        return
    text = "–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∞–Ω–∏–º–µ:\n" + "\n".join(favs)
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    query = message.text.strip()
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –∏–∑ –±–∞–∑—ã
    if query in anime_db:
        keyboard = generate_anime_keyboard(query, user_id)
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–∏–º–µ: {query}", reply_markup=keyboard)
        return

    # –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ Shikimori
    success = send_shikimori_info(message.chat.id, query)
    if not success:
        bot.send_message(message.chat.id, "–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    data = callback_storage.get(call.data)

    if not data:
        bot.answer_callback_query(call.id, "–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
        return

    # –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if data.startswith("episode_"):
        # –§–æ—Ä–º–∞—Ç: episode_{anime}|{episode}_{user_id}
        match = re.match(r"episode_(.+)\|(.+)_(\d+)", data)
        if match:
            anime = match.group(1)
            episode = match.group(2)
            uid = int(match.group(3))
            if uid != user_id:
                bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è.")
                return
            keyboard = generate_episode_keyboard(anime, episode, user_id)
            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–∏—é {episode} –∏–∑ –∞–Ω–∏–º–µ {anime}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–∑–≤—É—á–∫—É:",
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  reply_markup=keyboard)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

    elif data.startswith("dubbing_"):
        # –§–æ—Ä–º–∞—Ç: dubbing_{anime}|{episode}|{dubbing_name}_{user_id}
        match = re.match(r"dubbing_(.+)\|(.+)\|(.+)_(\d+)", data)
        if match:
            anime = match.group(1)
            episode = match.group(2)
            dubbing_name = match.group(3)
            uid = int(match.group(4))
            if uid != user_id:
                bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è.")
                return

            link = anime_db.get(anime, {}).get(episode, {}).get(dubbing_name)
            if link:
                bot.send_message(call.message.chat.id,
                                 f"–°—Å—ã–ª–∫–∞ –Ω–∞ {anime}, —Å–µ—Ä–∏—è {episode}, –æ–∑–≤—É—á–∫–∞ \"{dubbing_name}\":\n{link}")
            else:
                bot.send_message(call.message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

    elif data.startswith("anime_"):
        # –§–æ—Ä–º–∞—Ç: anime_{anime}_{user_id}
        match = re.match(r"anime_(.+)_(\d+)", data)
        if match:
            anime = match.group(1)
            uid = int(match.group(2))
            if uid != user_id:
                bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è.")
                return
            keyboard = generate_anime_keyboard(anime, user_id)
            bot.edit_message_text(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∞–Ω–∏–º–µ: {anime}",
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  reply_markup=keyboard)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

    elif data.startswith("favtoggle_"):
        # –§–æ—Ä–º–∞—Ç: favtoggle_{anime}_{user_id}
        match = re.match(r"favtoggle_(.+)_(\d+)", data)
        if match:
            anime = match.group(1)
            uid = int(match.group(2))
            if uid != user_id:
                bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è.")
                return
            user_str_id = str(user_id)
            favs = user_data.setdefault(user_str_id, {}).setdefault('favorites', [])
            if anime in favs:
                favs.remove(anime)
                text = f"–ê–Ω–∏–º–µ <b>{anime}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."
            else:
                favs.append(anime)
                text = f"–ê–Ω–∏–º–µ <b>{anime}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."
            save_user_data()
            bot.answer_callback_query(call.id, text)
            # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = generate_anime_keyboard(anime, user_id)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

    elif data.startswith("notiftoggle_"):
        # –§–æ—Ä–º–∞—Ç: notiftoggle_{anime}_{user_id}
        match = re.match(r"notiftoggle_(.+)_(\d+)", data)
        if match:
            anime = match.group(1)
            uid = int(match.group(2))
            if uid != user_id:
                bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è.")
                return
            user_str_id = str(user_id)
            notifs = user_data.setdefault(user_str_id, {}).setdefault('notifications', [])
            if anime in notifs:
                notifs.remove(anime)
                text = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è <b>{anime}</b> –æ—Ç–∫–ª—é—á–µ–Ω—ã."
            else:
                notifs.append(anime)
                text = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è <b>{anime}</b> –≤–∫–ª—é—á–µ–Ω—ã."
            save_user_data()
            bot.answer_callback_query(call.id, text)
            # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = generate_anime_keyboard(anime, user_id)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# ----------------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
