import os
import re
import time
import json
import hashlib
import requests
import csv
from io import StringIO
from telebot import TeleBot, types

# ----------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
bot = TeleBot(os.getenv("TELEGRAM_TOKEN"))  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = os.getenv("TELEGRAM_ID")         # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)

# ----------------------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑—ã –∞–Ω–∏–º–µ –∏–∑ Google Sheets (CSV)
def load_anime_db():
    url = "https://docs.google.com/spreadsheets/d/10dD8Hhf-uVxuloE6yy0p8hdswbW7xGrNR_6otJTbKuA/export?format=csv&gid=0"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.content.decode('utf-8')
        reader = csv.DictReader(StringIO(data))

        anime_db = {}
        for row in reader:
            anime = row['Anime']
            episode = row['Episode']
            dubbing = row['Dubbing Name']
            link = row['Link']

            anime_db.setdefault(anime, {}).setdefault(episode, {})[dubbing] = link
        return anime_db
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∞–Ω–∏–º–µ: {e}")
        return {}

anime_db = load_anime_db()

# ----------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open('user_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data():
    with open('user_data.json', 'w', encoding='utf-8') as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

user_data = load_user_data()

# ----------------------------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–æ–∫
callback_storage = {}

def create_short_id(long_string):
    hash_obj = hashlib.md5(long_string.encode())
    short_id = hash_obj.hexdigest()[:16]
    callback_storage[short_id] = long_string
    return short_id

# ----------------------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å Shikimori API
def send_shikimori_info(chat_id, title):
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/114.0.0.0 Safari/537.36"
        )
    }
    retries = 2
    timeout_sec = 15

    def request_with_retry(url):
        last_exception = None
        for attempt in range(retries):
            try:
                response = requests.get(url, headers=headers, timeout=timeout_sec)
                response.raise_for_status()
                return response
            except requests.exceptions.RequestException as e:
                last_exception = e
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                time.sleep(1)
        raise last_exception

    try:
        search_url = f"https://shikimori.one/api/animes?search={title}"
        response = request_with_retry(search_url)
        data = response.json()

        if not data:
            return False

        anime = data[0]
        anime_id = anime.get('id')
        if not anime_id:
            return False

        details_url = f"https://shikimori.one/api/animes/{anime_id}"
        details_response = request_with_retry(details_url)
        anime_details = details_response.json()

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –∏–º–µ–Ω–∏
        if not anime_details.get('russian') and anime_details.get('name'):
            alt_search_url = f"https://shikimori.one/api/animes?search={anime_details['name']}"
            alt_response = request_with_retry(alt_search_url)
            alt_data = alt_response.json()
            if alt_data:
                anime = alt_data[0]
                anime_id = anime.get('id')
                if anime_id:
                    details_url = f"https://shikimori.one/api/animes/{anime_id}"
                    details_response = request_with_retry(details_url)
                    anime_details = details_response.json()

        title_ru = anime_details.get('russian') or anime_details.get('name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        description = anime_details.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.').replace('<br>', '\n')
        year = anime_details.get('aired_on')
        year = year[:4] if year else "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        image_info = anime_details.get('image')
        image_url = f"https://shikimori.one{image_info['original']}" if image_info and image_info.get('original') else None

        caption = f"üé¨ <b>{title_ru}</b>\nüìÖ {year}\n\nüìù {description}"

        if image_url:
            bot.send_photo(chat_id, photo=image_url, caption=caption, parse_mode="HTML")
        else:
            bot.send_message(chat_id, caption, parse_mode="HTML")

        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Shikimori: {e}")
        return False

# ----------------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–∏–∏ –∏ –∞–Ω–∏–º–µ
def generate_episode_keyboard(anime, episode, user_id):
    markup = types.InlineKeyboardMarkup(row_width=3)

    episodes = sorted(anime_db[anime].keys(), key=lambda x: int(x) if x.isdigit() else x)
    current_index = episodes.index(episode)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —ç–ø–∏–∑–æ–¥–∞–º–∏
    nav_buttons = []
    if current_index > 0:
        prev_ep = episodes[current_index - 1]
        prev_id = create_short_id(f"episode_{anime}|{prev_ep}_{user_id}")
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=prev_id))
    else:
        nav_buttons.append(types.InlineKeyboardButton(" ", callback_data="empty"))

    nav_buttons.append(types.InlineKeyboardButton(f"–°–µ—Ä–∏—è {episode}", callback_data="empty"))

    if current_index < len(episodes) - 1:
        next_ep = episodes[current_index + 1]
        next_id = create_short_id(f"episode_{anime}|{next_ep}_{user_id}")
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=next_id))
    else:
        nav_buttons.append(types.InlineKeyboardButton(" ", callback_data="empty"))

    markup.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–µ–∫
    for dubbing_name in anime_db[anime][episode]:
        dub_id = create_short_id(f"dubbing_{anime}|{episode}|{dubbing_name}_{user_id}")
        markup.add(types.InlineKeyboardButton(dubbing_name, callback_data=dub_id))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∞–Ω–∏–º–µ"
    back_id = create_short_id(f"anime_{anime}_{user_id}")
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∏–º–µ", callback_data=back_id))

    return markup

def generate_anime_keyboard(anime, user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    user_str_id = str(user_id)
    user_favs = set(user_data.get(user_str_id, {}).get('favorites', []))
    user_notifs = set(user_data.get(user_str_id, {}).get('notifications', []))

    # –ö–Ω–æ–ø–∫–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ / –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    fav_text = "üíî –£–±—Ä–∞—Ç—å –∏–∑ –ª—é–±–∏–º—ã—Ö" if anime in user_favs else "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    fav_id = create_short_id(f"favtoggle_{anime}_{user_id}")
    markup.add(types.InlineKeyboardButton(fav_text, callback_data=fav_id))

    # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    if anime in user_favs:
        notif_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if anime in user_notifs else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        notif_id = create_short_id(f"notiftoggle_{anime}_{user_id}")
        markup.add(types.InlineKeyboardButton(notif_text, callback_data=notif_id))

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–∏–∏ (–ø–µ—Ä–≤–∞—è –ø–æ –ø–æ—Ä—è–¥–∫—É)
    episodes = sorted(anime_db[anime].keys(), key=lambda x: int(x) if x.isdigit() else x)
    if episodes:
        first_ep_id = create_short_id(f"episode_{anime}|{episodes[0]}_{user_id}")
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–∏—é", callback_data=first_ep_id))

    return markup

# ----------------------------------------
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ —Ñ–æ–Ω–µ)
def send_notification(anime):
    sent_count = 0
    for user_str_id, data_dict in user_data.items():
        if anime in data_dict.get('notifications', []):
            try:
                bot.send_message(int(user_str_id), f"üîî –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–Ω–∏–º–µ: <b>{anime}</b>!", parse_mode="HTML")
                sent_count += 1
            except Exception:
                pass
    return sent_count

def periodic_check():
    while True:
        try:
            new_db = load_anime_db()
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π anime_db –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ send_notification()
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É
            global anime_db
            anime_db = new_db
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        time.sleep(900)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

# ----------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

@bot.message_handler(commands=["start"])
def start_message(message):
    user_id = str(message.from_user.id)
    user_data.setdefault(user_id, {"favorites": [], "notifications": []})
    save_user_data()

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é."
    )
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["help"])
def help_message(message):
    help_text = (
        "üìñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–∏–∏ –∏ –æ–∑–≤—É—á–∫–∏."
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(func=lambda m: True)
def handle_anime_search(message):
    user_id = str(message.from_user.id)
    query = message.text.strip()

    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ anime_db –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    found_animes = [anime for anime in anime_db.keys() if query.lower() in anime.lower()]

    if not found_animes:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ —Å Shikimori API
        if send_shikimori_info(message.chat.id, query):
            return
        bot.send_message(message.chat.id, "–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –∞–Ω–∏–º–µ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä
    markup = types.InlineKeyboardMarkup(row_width=1)
    for anime in found_animes:
        anime_id = create_short_id(f"anime_{anime}_{user_id}")
        markup.add(types.InlineKeyboardButton(anime, callback_data=anime_id))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ:", reply_markup=markup)

# ----------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    data = call.data

    if data == "empty":
        bot.answer_callback_query(call.id)
        return

    long_data = callback_storage.get(data)
    if not long_data:
        bot.answer_callback_query(call.id, "–ò—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –†–∞–∑–±–æ—Ä –¥–ª–∏–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if long_data.startswith("anime_"):
        # –í—ã–±—Ä–∞–Ω–æ –∞–Ω–∏–º–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ä–∏—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        anime = long_data[len("anime_"):].rsplit("_", 1)[0]
        markup = generate_anime_keyboard(anime, call.from_user.id)
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–∏–º–µ: <b>{anime}</b>", call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
        bot.answer_callback_query(call.id)

    elif long_data.startswith("episode_"):
        # –í—ã–±–æ—Ä —Å–µ—Ä–∏–∏
        match = re.match(r"episode_(.+)\|(.+)_(\d+)", long_data)
        if not match:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return
        anime, episode, uid = match.groups()
        markup = generate_episode_keyboard(anime, episode, int(uid))
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–∏—é <b>{episode}</b> –∞–Ω–∏–º–µ <b>{anime}</b>", call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
        bot.answer_callback_query(call.id)

    elif long_data.startswith("dubbing_"):
        # –í—ã–±–æ—Ä –æ–∑–≤—É—á–∫–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏
        match = re.match(r"dubbing_(.+)\|(.+)\|(.+)_(\d+)", long_data)
        if not match:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return
        anime, episode, dubbing, uid = match.groups()
        link = anime_db.get(anime, {}).get(episode, {}).get(dubbing)
        if link:
            bot.send_message(call.message.chat.id, f"–°—Å—ã–ª–∫–∞ –Ω–∞ {anime} —Å–µ—Ä–∏—è {episode} ({dubbing}):\n{link}")
        else:
            bot.send_message(call.message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        bot.answer_callback_query(call.id)

    elif long_data.startswith("favtoggle_"):
        # –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        anime = long_data[len("favtoggle_"):].rsplit("_", 1)[0]
        favs = user_data.setdefault(user_id, {}).setdefault("favorites", [])
        if anime in favs:
            favs.remove(anime)
            bot.answer_callback_query(call.id, f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {anime}")
        else:
            favs.append(anime)
            bot.answer_callback_query(call.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {anime}")
        save_user_data()
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = generate_anime_keyboard(anime, int(user_id))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

    elif long_data.startswith("notiftoggle_"):
        # –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        anime = long_data[len("notiftoggle_"):].rsplit("_", 1)[0]
        notifs = user_data.setdefault(user_id, {}).setdefault("notifications", [])
        if anime in notifs:
            notifs.remove(anime)
            bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è: {anime}")
        else:
            notifs.append(anime)
            bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è: {anime}")
        save_user_data()
        markup = generate_anime_keyboard(anime, int(user_id))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# ----------------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
